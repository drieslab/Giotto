---
title: "osmFISH Mouse SS Cortex"
date: 2022-09-16
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{osmFISH Mouse SS Cortex}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

# Dataset explanation

[Codeluppi et al.](https://www.nature.com/articles/s41592-018-0175-z) created a cyclic single-molecule fluorescence in situ hybridization (osmFISH) technology and define the cellular organization of the somatosensory cortex with the expression of 33 genes in 5,328 cells.

![](images/osmfish_mouse_ss_cortex/osmfish_image_demo.png)

# Set up Giotto environment


```{r, eval=FALSE}
# Ensure Giotto Suite is installed.
if(!"Giotto" %in% installed.packages()) {
  devtools::install_github("drieslab/Giotto@suite")
}

# Ensure GiottoData, a small, helper module for tutorials, is installed.
if(!"GiottoData" %in% installed.packages()) {
  devtools::install_github("drieslab/GiottoData")
}

library(Giotto)
# Ensure the Python environment for Giotto has been installed.
genv_exists = checkGiottoEnvironment()
if(!genv_exists){
  # The following command need only be run once to install the Giotto environment.
  installGiottoEnvironment()
}
```



```{r, eval=FALSE}
library(Giotto)
library(GiottoData)

# 1. set working directory
results_folder = 'path/to/result'

# Optional: Specify a path to a Python executable within a conda or miniconda 
# environment. If set to NULL (default), the Python executable within the previously
# installed Giotto environment will be used.
my_python_path = NULL # alternatively, "/local/python/path/python" if desired.
```


# Dataset download

The osmFISH data to run this tutorial can be found [here](https://github.com/drieslab/spatial-datasets/tree/master/data/2018_osmFISH_SScortex). Alternatively you can use the **getSpatialDataset** to automatically download this dataset like we do in this example; to download the data used to create the Giotto Object below, please ensure that
[wget](https://www.gnu.org/software/wget/?) is installed locally.


```{r, eval=FALSE}
# download data to working directory ####
# if wget is installed, set method = 'wget'
# if you run into authentication issues with wget, then add " extra = '--no-check-certificate' "
getSpatialDataset(dataset = 'osmfish_SS_cortex', directory = results_folder, method = 'wget')
```


# 1. Giotto global instructions and preparations


```{r, eval=FALSE}
## instructions allow us to automatically save all plots into a chosen results folder
instrs = createGiottoInstructions(save_plot = TRUE, 
                                  show_plot = FALSE,
                                  save_dir = results_folder,
                                  python_path = python_path)

expr_path = paste0(results_folder, "osmFISH_prep_expression.txt")
loc_path = paste0(results_folder, "osmFISH_prep_cell_coordinates.txt")
meta_path = paste0(results_folder, "osmFISH_prep_cell_metadata.txt")
```


# 2. Create Giotto object & process data


```{r, eval=FALSE}
## create
osm_test <- createGiottoObject(expression = expr_path,
                              spatial_locs = loc_path,
                              instructions = instrs)

## add field annotation
metadata = data.table::fread(file = meta_path)
osm_test = addCellMetadata(osm_test, new_metadata = metadata,
                           by_column = T, column_cell_ID = 'CellID')
## filter
osm_test <- filterGiotto(gobject = osm_test,
                         expression_threshold = 1,
                         feat_det_in_min_cells = 10,
                         min_det_feats_per_cell = 10,
                         expression_values = c('raw'),
                         verbose = T)

## normalize Giotto
## there are two ways for osmFISH object

# 1. standard z-score way
osm_test <- normalizeGiotto(gobject = osm_test)

# 2. osmFISH way
raw_expr_matrix = get_expression_values(osm_test, values = "raw")
norm_genes = (raw_expr_matrix/GiottorowSums_flex(raw_expr_matrix)) * nrow(raw_expr_matrix)

norm_genes_cells = Giottot_flex((Giottot_flex(norm_genes)/GiottocolSums_flex(norm_genes)) * ncol(raw_expr_matrix))
osm_test = set_expression_values(osm_test, values = norm_genes_cells , name = "custom")

## add gene & cell statistics
osm_test <- addStatistics(gobject = osm_test)

# save according to giotto instructions
spatPlot2D(gobject = osm_test, cell_color = 'ClusterName', point_size = 1.5,
         save_param = list(save_name = '2_a_original_clusters'))
```


![](images/osmfish_mouse_ss_cortex/2_a_original_clusters.png)


```{r, eval=FALSE}
spatPlot2D(gobject = osm_test, cell_color = 'Region',
         save_param = list(save_name = '2_b_original_regions'))
```


![](images/osmfish_mouse_ss_cortex/2_b_original_regions.png)


```{r, eval=FALSE}
spatPlot2D(gobject = osm_test, cell_color = 'ClusterID',
         save_param = list(save_name = '2_c_clusterID'))
```


![](images/osmfish_mouse_ss_cortex/2_c_clusterID.png)


```{r, eval=FALSE}
spatPlot2D(gobject = osm_test, cell_color = 'total_expr', color_as_factor = F, gradient_midpoint = 160,
         gradient_limits = c(120,220),
         save_param = list(save_name = '2_d_total_expr_limits'))
```


![](images/osmfish_mouse_ss_cortex/2_d_total_expr_limits.png)

# 3. Dimension reduction


```{r, eval=FALSE}
## highly variable genes (HVG)
# only 33 genes so use all genes

## run PCA on expression values (default)
osm_test <- runPCA(gobject = osm_test, expression_values = 'custom', scale_unit = F, center = F)
screePlot(osm_test, ncp = 30,
          save_param = list(save_name = '3_a_screeplot'))
```


![](images/osmfish_mouse_ss_cortex/3_a_screeplot.png)


```{r, eval=FALSE}
plotPCA(osm_test,
        save_param = list(save_name = '3_b_PCA_reduction'))
```


![](images/osmfish_mouse_ss_cortex/3_b_PCA_reduction.png)


```{r, eval=FALSE}
## run UMAP and tSNE on PCA space (default)
osm_test <- runUMAP(osm_test, dimensions_to_use = 1:31, n_threads = 4)
plotUMAP(gobject = osm_test,
         save_param = list(save_name = '3_c_UMAP_reduction.png'))
```


![](images/osmfish_mouse_ss_cortex/3_c_UMAP_reduction.png)


```{r, eval=FALSE}
plotUMAP(gobject = osm_test,
         cell_color = 'total_expr', color_as_factor = F, gradient_midpoint = 180, gradient_limits = c(120, 220),
         save_param = list(save_name = '3_d_UMAP_reduction_expression.png'))
```


![](images/osmfish_mouse_ss_cortex/3_d_UMAP_reduction_expression.png)


```{r, eval=FALSE}
osm_test <- runtSNE(osm_test, dimensions_to_use = 1:31, perplexity = 70, check_duplicates = F)
plotTSNE(gobject = osm_test,  save_param = list(save_name = '3_e_tSNE_reduction'))
```


![](images/osmfish_mouse_ss_cortex/3_e_tSNE_reduction.png)

# 4. Cluster


```{r, eval=FALSE}
## hierarchical clustering
osm_test = doHclust(gobject = osm_test, expression_values = 'custom', k = 36)
plotUMAP(gobject = osm_test, cell_color = 'hclust', point_size = 2.5,
         show_NN_network = F, edge_alpha = 0.05,
         save_param = list(save_name = '4_a_UMAP_hclust'))
```


![](images/osmfish_mouse_ss_cortex/4_a_UMAP_hclust.png)


```{r, eval=FALSE}
## kmeans clustering
osm_test = doKmeans(gobject = osm_test, expression_values = 'normalized', dim_reduction_to_use = 'pca', dimensions_to_use = 1:20, centers = 36, nstart = 2000)
plotUMAP(gobject = osm_test, cell_color = 'kmeans',
         point_size = 2.5, show_NN_network = F, edge_alpha = 0.05, 
         save_param =  list(save_name = '4_b_UMAP_kmeans'))
```


![](images/osmfish_mouse_ss_cortex/4_b_UMAP_kmeans.png)


```{r, eval=FALSE}
## Leiden clustering strategy:
# 1. overcluster
# 2. merge small clusters that are highly similar

# sNN network (default)
osm_test <- createNearestNetwork(gobject = osm_test, dimensions_to_use = 1:31, k = 12)

osm_test <- doLeidenCluster(gobject = osm_test, resolution = 0.09, n_iterations = 1000)
plotUMAP(gobject = osm_test, cell_color = 'leiden_clus', point_size = 2.5,
         show_NN_network = F, edge_alpha = 0.05,
         save_param = list(save_name = '4_c_UMAP_leiden'))
```


![](images/osmfish_mouse_ss_cortex/4_c_UMAP_leiden.png)


```{r, eval=FALSE}
# merge small groups based on similarity
leiden_similarities = getClusterSimilarity(osm_test,
                                           expression_values = 'custom',
                                           cluster_column = 'leiden_clus')

osm_test = mergeClusters(osm_test,
                         expression_values = 'custom',
                         cluster_column = 'leiden_clus',
                         new_cluster_name = 'leiden_clus_m',
                         max_group_size = 30,
                         force_min_group_size = 25,
                         max_sim_clusters = 10,
                         min_cor_score = 0.7)

plotUMAP(gobject = osm_test, cell_color = 'leiden_clus_m', point_size = 2.5,
         show_NN_network = F, edge_alpha = 0.05,
         save_param = list(save_name = '4_d_UMAP_leiden_merged'))
```


![](images/osmfish_mouse_ss_cortex/4_d_UMAP_leiden_merged.png)


```{r, eval=FALSE}
## show cluster relationships
showClusterHeatmap(gobject = osm_test, expression_values = 'custom', cluster_column = 'leiden_clus_m',
                   save_param = list(save_name = '4_e_heatmap', units = 'cm'),
                   row_names_gp = grid::gpar(fontsize = 6), column_names_gp = grid::gpar(fontsize = 6))
```


![](images/osmfish_mouse_ss_cortex/4_e_heatmap.png)


```{r, eval=FALSE}
showClusterDendrogram(osm_test, cluster_column = 'leiden_clus_m', h = 1, rotate = T,
                      save_param = list(save_name = '4_f_dendro', units = 'cm'))
```


![](images/osmfish_mouse_ss_cortex/4_f_dendro.png)

# 5. Co-visualize


```{r, eval=FALSE}
# expression and spatial
spatDimPlot2D(gobject = osm_test, cell_color = 'leiden_clus', spat_point_size = 2,
              save_param = list(save_name = '5_a_covis_leiden'))
```


![](images/osmfish_mouse_ss_cortex/5_a_covis_leiden.png)


```{r, eval=FALSE}
spatDimPlot2D(gobject = osm_test, cell_color = 'leiden_clus_m', spat_point_size = 2,
              save_param = list(save_name = '5_b_covis_leiden_m'))
```


![](images/osmfish_mouse_ss_cortex/5_b_covis_leiden_m.png)


```{r, eval=FALSE}
spatDimPlot2D(gobject = osm_test, cell_color = 'leiden_clus_m', 
              dim_point_size = 2, spat_point_size = 2, select_cell_groups = 'm_8',
              save_param = list(save_name = '5_c_covis_leiden_merged_selected'))
```


![](images/osmfish_mouse_ss_cortex/5_c_covis_leiden_merged_selected.png)


```{r, eval=FALSE}
spatDimPlot2D(gobject = osm_test, cell_color = 'total_expr', color_as_factor = F,
              gradient_midpoint = 160, gradient_limits = c(120,220),
              save_param = list(save_name = '5_d_total_expr'))
```


![](images/osmfish_mouse_ss_cortex/5_d_total_expr.png)

# 6. Differential expression


```{r, eval=FALSE}
## split dendrogram nodes ##
dendsplits = getDendrogramSplits(gobject = osm_test,
                                 expression_values = 'custom',
                                 cluster_column = 'leiden_clus_m')
split_3_markers = findMarkers(gobject = osm_test,
                                         method = 'gini',
                                         expression_values = 'custom',
                                         cluster_column = 'leiden_clus_m',
group_1 = unlist(dendsplits[3]$tree_1), group_2 = unlist(dendsplits[3]$tree_2))
```


![](images/osmfish_mouse_ss_cortex/6_a_dendrogram.png)


```{r, eval=FALSE}
## Individual populations ##
markers = findMarkers_one_vs_all(gobject = osm_test,
                                 method = 'scran',
                                 expression_values = 'custom',
                                 cluster_column = 'leiden_clus_m',
                                 min_feats = 2, rank_score = 2)
## violinplot
topgenes = markers[, head(.SD, 1), by = 'cluster']$feats
violinPlot(osm_test, feats = unique(topgenes), cluster_column = 'leiden_clus_m', expression_values = 'custom',
           strip_text = 5, strip_position = 'right',
           save_param = c(save_name = '6_a_violinplot'))
```


![](images/osmfish_mouse_ss_cortex/6_a_violinplot.png)


```{r, eval=FALSE}
plotMetaDataHeatmap(osm_test, expression_values = 'custom',
                    metadata_cols = c('leiden_clus_m'), 
                    save_param = c(save_name = '6_b_metaheatmap'))
```


![](images/osmfish_mouse_ss_cortex/6_b_metaheatmap.png)


```{r, eval=FALSE}
plotMetaDataHeatmap(osm_test, expression_values = 'custom',
                    metadata_cols = c('leiden_clus_m'), 
                    save_param = c(save_name = '6_e_metaheatmap_all_genes'))
```


![](images/osmfish_mouse_ss_cortex/6_e_metaheatmap_all_genes.png)


```{r, eval=FALSE}
plotMetaDataHeatmap(osm_test, expression_values = 'custom',
                    metadata_cols = c('ClusterName'), 
                    save_param = c(save_name = '6_f_metaheatmap_all_genes_names'))
```


![](images/osmfish_mouse_ss_cortex/6_f_metaheatmap_all_genes_names.png)

# 7. Cell type annotation

Use [annotateGiotto()](http://giottosuite.com/reference/annotateGiotto.html) to annotate the clusters. For this dataset, we have ClusterName in the metadata.

# 8. Spatial grid


```{r, eval=FALSE}
osm_test <- createSpatialGrid(gobject = osm_test,
                              sdimx_stepsize = 2000,
                              sdimy_stepsize = 2000,
                              minimum_padding = 0)
spatPlot2D(osm_test, cell_color = 'ClusterName', show_grid = T,

           grid_color = 'lightblue', spatial_grid_name = 'spatial_grid',
           point_size = 1.5,
           save_param = c(save_name = '8_grid_det_cell_types'))
```


![](images/osmfish_mouse_ss_cortex/8_grid_det_cell_types.png)

# 9. Spatial network


```{r, eval=FALSE}
osm_test <- createSpatialNetwork(gobject = osm_test)
spatPlot2D(gobject = osm_test, show_network = T,
           network_color = 'blue',
           point_size = 1.5, cell_color = 'ClusterName', legend_symbol_size = 2,
           save_param = c(save_name = '9_spatial_network_k10'))
```


![](images/osmfish_mouse_ss_cortex/9_spatial_network_k10.png)

# 10. Spatial genes


```{r, eval=FALSE}
# km binarization
kmtest = binSpect(osm_test, calc_hub = T, hub_min_int = 5,
                  bin_method = 'kmeans')

spatDimFeatPlot2D(osm_test, expression_values = 'scaled',
               feats = kmtest$feats[1:3], plot_alignment = 'horizontal',
               cow_n_col = 1,
               save_param = c(save_name = '10_a_spatial_genes_km'))
```


![](images/osmfish_mouse_ss_cortex/10_a_spatial_genes_km.png)

# 12. Cell-cell preferential proximity


```{r, eval=FALSE}
## calculate frequently seen proximities
cell_proximities = cellProximityEnrichment(gobject = osm_test,
                                           cluster_column = 'ClusterName',
                                           number_of_simulations = 1000)
## barplot
cellProximityBarplot(gobject = osm_test, CPscore = cell_proximities, min_orig_ints = 25, min_sim_ints = 25,
                     save_param = c(save_name = '12_a_barplot_cell_cell_enrichment'))
```


![](images/osmfish_mouse_ss_cortex/12_a_barplot_cell_cell_enrichment.png)


```{r, eval=FALSE}
## heatmap
cellProximityHeatmap(gobject = osm_test, CPscore = cell_proximities, order_cell_types = T, scale = T,
                     color_breaks = c(-1.5, 0, 1.5), color_names = c('blue', 'white', 'red'),
                     save_param = c(save_name = '12_b_heatmap_cell_cell_enrichment', unit = 'in'))
```


![](images/osmfish_mouse_ss_cortex/12_b_heatmap_cell_cell_enrichment.png)


```{r, eval=FALSE}
## network
cellProximityNetwork(gobject = osm_test, CPscore = cell_proximities, remove_self_edges = F, only_show_enrichment_edges = T,
                     save_param = c(save_name = '12_c_network_cell_cell_enrichment'))
```


![](images/osmfish_mouse_ss_cortex/12_c_network_cell_cell_enrichment.png)


```{r, eval=FALSE}
## visualization
spec_interaction = "Astrocyte_Mfge8--Oligodendrocyte_Precursor_cells"
cellProximitySpatPlot(gobject = osm_test,
                      interaction_name = spec_interaction,
                      cluster_column = 'ClusterName', 
                      cell_color = 'ClusterName', cell_color_code = c('Astrocyte_Mfge8' = 'blue', 'Oligodendrocyte_Precursor_cells' = 'red'),
                      coord_fix_ratio = 0.5,  point_size_select = 3, point_size_other = 1.5,
                      save_param = c(save_name = '12_d_cell_cell_enrichment_selected'))
```


![](images/osmfish_mouse_ss_cortex/12_d_cell_cell_enrichment_selected.png)
